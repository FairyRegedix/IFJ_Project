Prolog = "package" "main" EOL Newline_n Prog
Prog = "func" Func EOL Newline_n Prog
Prog = "eof"
Func = "id" "(" Params ")" Ret_type "{" Newline_n Statement_list "}"
Newline_n = EOL Newline_n | eps
Params = "id" Type Params_n
Params = eps
Params_n = "," "id" Type Params_n
Params_n = eps
Ret_type = eps
Ret_type = "(" Type Ret_type_n ")"
Ret_type_n = "," Type Ret_type_n
Ret_type_n = eps
Statement_list = Statement EOL Newline_n Statement_list
Statement_list = eps
Statement = Def_var
Def_var = "id" Var
Var = ":=" "exp" | Func_call
Var = Assign End_assign
Assign = "," Newline_n "id" Assign
Assign = eps
End_assign = "=" Newline_n Exp_end_assign
Exp_end_assign = "id" Func_call
Exp_end_assign = "exp" Exp_n
Exp_n = "," Newline_n "exp" Exp_n
Exp_n = eps
Statement = "if" Newline_n "exp" "{"  Newline_n Statement_list "}" "else" "{" Newline_n Statement_list  "}"
Statement = "for" Newline_n For_def ";" Newline_n "exp" ";" Newline_n For_assign "{" Newline_n Statement_list "}"
For_def = eps
For_def = "id" Var
For_assign = eps
For_assign = "id" Assign End_assign
Func_call = "(" Call_params ")"
Call_params = Term Term_n | eps
Type = "int"
Type = "float"
Type = "bool"
Type = "string"
Term = "id"
Term = "celecislo"
Term = "desatinnecislo"
Term = "retazec"
Term = "true" | "false"
Term_n = "," Term Term_n
Term_n = eps
Statement = "return" Return_exp
Return_exp = eps
Return_exp = "exp" Exp_n
EOL = #"\n"
Whitespace = #"\s+"|